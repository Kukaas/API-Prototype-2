// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String      @unique
  passwordHash  String
  birthDate     DateTime
  address       String?
  contactNumber String?
  role          String      @default("EMPLOYE")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  productions   Production[]
  finishedProducts FinishedProduct[] // add this line
}


model Production {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  level                String		//COLLEGE or SHS
  productType          String
  quantity             Int
  size                 String?
  status               String
  productionStartTime   DateTime
  productionEndTime    DateTime?
  user                 User?              @relation(fields: [userId], references: [id])
  userId               String?            @db.ObjectId
  finishedProducts     FinishedProduct[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model FinishedProduct {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  level                String		//COLLEGE or SHS
  productType          String
  quantity             Int
  size                 String?
  production           Production?        @relation(fields: [productionId], references: [id])
  productionId         String?            @db.ObjectId
  user                 User?               @relation(fields: [userId], references: [id])
  userId               String?             @db.ObjectId
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Inventory {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  level                String		//COLLEGE or SHS
  productType          String
  quantity             Int
  size                 String?
  status               String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model RawMaterialInventory {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  rawMaterialType      String
  quantity             Int
  unit                 String?
  status               String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Order {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  studentNumber        String             @unique
  studentName          String
  gender               String
  status               String
  totalPrice           Int
  orderItems           OrderItem[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model OrderItem {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  level                String		//COLLEGE or SHS
  productType          String
  quantity             Int
  size                 String?
  unitPrice	           Int
  totalPrice	         Int		//From quantity * unitPrice
  orderId              String             @db.ObjectId
  order                Order              @relation(fields: [orderId], references: [id])
}


model SalesReport {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  level                String		//COLLEGE or SHS
  productType          String
  salesDate            DateTime
  size                 String?
  totalRevenue         Float	
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

